<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.2.xsd 
		http://www.springframework.org/schema/aop 
		http://www.springframework.org/schema/aop/spring-aop-3.2.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.2.xsd ">

	<!-- 可以扫描controller、service、...
	这里让扫描controller，指定controller的包
	 -->
	<context:component-scan base-package="com.book.library.controller">
	    <context:include-filter type="annotation"
	        expression="org.springframework.stereotype.Controller"/>
	    <context:include-filter type="annotation" 
	        expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	<!-- 静态资源解析
	包括 ：js、css、img、..
	 -->
	 <mvc:resources location="/js/" mapping="/js/**"/>
	 <mvc:resources location="/img/" mapping="/img/**"/>
	
		
	<!--注解映射器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/> -->
	<!--注解适配器 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/> -->
	
	<!-- 使用 mvc:annotation-driven代替上边注解映射器和注解适配器配置
	mvc:annotation-driven默认加载很多的参数绑定方法，
	比如json转换解析器就默认加载了，如果使用mvc:annotation-driven不用配置上边的RequestMappingHandlerMapping和RequestMappingHandlerAdapter
	实际开发时使用mvc:annotation-driven
	 -->
	<!-- <mvc:annotation-driven conversion-service="conversionService"
	validator="validator"></mvc:annotation-driven> -->
	<mvc:annotation-driven>
	    <mvc:message-converters register-defaults="true">
	        <bean class="org.springframework.http.converter.StringHttpMessageConverter"> 
	            <constructor-arg value="UTF-8" />        
	        </bean>
	        <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	            <property name="objectMapper">
	                <bean class="com.github.miemiedev.mybatis.paginator.jackson2.PageListJsonMapper" />
	            </property>
	        </bean>
	    </mvc:message-converters> 
	    <!-- <mvc:argument-resolvers>
            <bean class="com.zondy.Lgworknet.web.bind.method.CurrentUserMethodArgumentResolver"/>
        </mvc:argument-resolvers>   -->
	</mvc:annotation-driven>
	

	<!-- 视图解析器
	解析jsp解析，默认使用jstl标签，classpath下的得有jstl的包
	 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 配置jsp路径的前缀 -->
		<property name="prefix" value="/WEB-INF/view/"/>
		<!-- 配置jsp路径的后缀 -->
		<property name="suffix" value=".jsp"/>
	</bean>
	
	<!-- 配置中加入拦截器 -->
	<mvc:interceptors>
	    <mvc:interceptor>
	        <mvc:mapping path="/**" />
	        <bean class="com.github.miemiedev.mybatis.paginator.springmvc.PageListAttrHandlerInterceptor" />
	    </mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 控制器异常处理 -->
    <!-- <bean id="exceptionHandlerExceptionResolver" class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver">
    </bean>
    <bean class="com.zondy.Lgworknet.web.exception.DefaultExceptionHandler"/> -->
	
	<!-- 在springmvc中加入shiro配置  -->
	<!-- 开启aop，对类代理 -->
 	<aop:config proxy-target-class="true"></aop:config>
 	<!-- 开启注解支持 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean> 
      
    <!-- 单机版solr -->
	<!-- <bean id="SolrServer" class="org.apache.solr.client.solrj.impl.HttpSolrServer">
		<constructor-arg name="baseURL" value="http://localhost:7080/solr/db_building"></constructor-arg>
		<property name="defaultCollection" value="db_building"></property>
	</bean>  -->
	<!-- 集群版SolrCloud -->
	<!--
	<bean class="org.apache.solr.client.solrj.impl.CloudSolrServer">
		<constructor-arg name="zkHost" value="127.0.0.1:2181,127.0.0.1:2182,127.0.0.1:2183"></constructor-arg>
		<property name="defaultCollection" value="collection2"></property>
	</bean>
	-->

</beans>